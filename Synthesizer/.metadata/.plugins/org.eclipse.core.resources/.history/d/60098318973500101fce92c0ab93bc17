#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "xgpio.h"
#include <math.h>
#include "xparameters.h"

#define TIMER_DEVICE_ID      XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID       XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR      XPAR_SCUTIMER_INTR
#define SAMPLE_RATE          48000
#define PI                   3.14159265358979323846

#define MAX_DELAY            4800  // 0.1s delay at 48kHz

int ledAnimEcho = 0x08;    // Start bij LD3 (bit 3)
int ledAnimReverb = 0x01;  // Start bij LD0 (bit 0)


// GPIO
XGpio GpioButtons;
XGpio GpioSwitches;
XGpio GpioLed;

// LEDS Signal
void DisplayStatusOnLED(u32 buttonStatus, u32 switchStatus) {
    uint8_t ledValue = 0x0;

    // Toon toonselectie op LD0–3
    switch (buttonStatus) {
        case 1: ledValue |= 0x01; break;  // A4
        case 2: ledValue |= 0x02; break;  // C5
        case 4: ledValue |= 0x04; break;  // E5
        case 8: ledValue |= 0x08; break;  // G5
        default: break;
    }

    // Echo aan: schuivend patroon van LD3 naar LD0
    if (switchStatus & 0x1) {
        ledValue |= 0x10;               // Echo-indicatie op LD4
        ledValue |= ledAnimEcho & 0x0F; // animatie op LD0–3
        ledAnimEcho >>= 1;
        if (ledAnimEcho == 0) ledAnimEcho = 0x08;
    }

    // Reverb aan: schuivend patroon van LD0 naar LD3
    if (switchStatus & 0x2) {
        ledValue |= 0x20;                // Reverb-indicatie op LD5
        ledValue |= ledAnimReverb & 0x0F; // animatie op LD0–3
        ledAnimReverb <<= 1;
        if (ledAnimReverb > 0x08) ledAnimReverb = 0x01;
    }

    XGpio_DiscreteWrite(&GpioLed, 1, ledValue);
}



// Audio variables
volatile int32_t inputL, inputR, outputL, outputR;

// Delay buffers for echo and reverb
int32_t echoBufferL[MAX_DELAY] = {0};
int32_t echoBufferR[MAX_DELAY] = {0};
int32_t reverbBufferL[MAX_DELAY] = {0};
int32_t reverbBufferR[MAX_DELAY] = {0};
int delayIndex = 0;

// Tone generation phases
static float phase1 = 0.0f, phase2 = 0.0f, phase3 = 0.0f, phase4 = 0.0f;

// Generate a sine wave tone
void GenerateTone(int32_t* outputBufferL, int32_t* outputBufferR, int bufferSize, float frequency, float* phase) {
    const float amplitude = 1000000.0f;  // Adjust amplitude as needed
    const float increment = 2.0f * PI * frequency / SAMPLE_RATE;

    for (int i = 0; i < bufferSize; i++) {
        float sample = sinf(*phase);
        int32_t value = (int32_t)(sample * amplitude);
        outputBufferL[i] = outputBufferR[i] = value;

        *phase += increment;
        if (*phase >= 2.0f * PI) *phase -= 2.0f * PI;
    }
}

// Echo effect
void EchoEffect(int32_t* inputL, int32_t* inputR, int32_t* outputL, int32_t* outputR) {
    // Simple echo: average current input with delayed sample
    *outputL = (*inputL + echoBufferL[delayIndex]) / 2;
    *outputR = (*inputR + echoBufferR[delayIndex]) / 2;

    // Store current output in delay buffer
    echoBufferL[delayIndex] = *outputL;
    echoBufferR[delayIndex] = *outputR;
}

// Reverb effect
void ReverbEffect(int32_t* inputL, int32_t* inputR, int32_t* outputL, int32_t* outputR) {
    // Simple reverb: weighted average of current input and delayed sample
    *outputL = (*inputL * 3 + reverbBufferL[delayIndex]) / 4;
    *outputR = (*inputR * 3 + reverbBufferR[delayIndex]) / 4;

    // Store current output in delay buffer
    reverbBufferL[delayIndex] = *outputL;
    reverbBufferR[delayIndex] = *outputR;
}

// Timer ISR
static void Timer_ISR(void *CallBackRef) {
    XScuTimer *TimerInstancePtr = (XScuTimer *)CallBackRef;
    XScuTimer_ClearInterruptStatus(TimerInstancePtr);

    // Read GPIOs
    u32 buttonStatus = XGpio_DiscreteRead(&GpioButtons, 1);
    u32 switchStatus = XGpio_DiscreteRead(&GpioSwitches, 2);

    // Display LEDS
    DisplayStatusOnLED(buttonStatus, switchStatus);

    // Read input
    inputL = (int32_t)Xil_In32(I2S_DATA_RX_L_REG);
    inputR = (int32_t)Xil_In32(I2S_DATA_RX_R_REG);
    outputL = inputL;
    outputR = inputR;

    // Button-based tone generation
    switch (buttonStatus) {
        case 1:
            GenerateTone(&outputL, &outputR, 1, 440.0f, &phase1);  // A4
            break;
        case 2:
            GenerateTone(&outputL, &outputR, 1, 523.25f, &phase2);  // C5
            break;
        case 4:
            GenerateTone(&outputL, &outputR, 1, 659.25f, &phase3);  // E5
            break;
        case 8:
            GenerateTone(&outputL, &outputR, 1, 783.99f, &phase4);  // G5
            break;
        default:
            break;
    }

    // Switch-based echo/reverb
    if (switchStatus & 0x1) {
        EchoEffect(&outputL, &outputR, &outputL, &outputR);
    }
    if (switchStatus & 0x2) {
        ReverbEffect(&outputL, &outputR, &outputL, &outputR);
    }

    delayIndex = (delayIndex + 1) % MAX_DELAY;

    // Write output
    Xil_Out32(I2S_DATA_TX_L_REG, (u32)outputL);
    Xil_Out32(I2S_DATA_TX_R_REG, (u32)outputR);
}

static int Timer_Intr_Setup(XScuGic *IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId) {
    XScuGic_Config *IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
    XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, IntcInstancePtr);
    XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
    XScuGic_Enable(IntcInstancePtr, TimerIntrId);
    XScuTimer_EnableInterrupt(TimerInstancePtr);
    Xil_ExceptionEnable();
    return XST_SUCCESS;
}

int main() {
    init_platform();

    IicConfig(XPAR_XIICPS_0_DEVICE_ID);
    AudioPllConfig();
    AudioConfigureJacks();
    LineinLineoutConfig();

    xil_printf("Audio Synthesiser DEMO");

    // GPIO setup
    XGpio_Initialize(&GpioButtons, XPAR_AXI_GPIO_1_DEVICE_ID);
    XGpio_Initialize(&GpioSwitches, XPAR_AXI_GPIO_1_DEVICE_ID);
    XGpio_SetDataDirection(&GpioButtons, 1, 0xF);  // 4 buttons
    XGpio_SetDataDirection(&GpioSwitches, 2, 0x3); // 2 switches

    // LEDS init
    XGpio_Initialize(&GpioLed, XPAR_AXI_GPIO_2_DEVICE_ID);
    XGpio_SetDataDirection(&GpioLed, 1, 0x0); // output


    // Timer setup
    XScuTimer Scu_Timer;
    XScuTimer_Config *Scu_ConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);
    XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
    Timer_Intr_Setup(&(XScuGic){0}, &Scu_Timer, TIMER_IRPT_INTR);
    XScuTimer_LoadTimer(&Scu_Timer, (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2) / SAMPLE_RATE);
    XScuTimer_EnableAutoReload(&Scu_Timer);
    XScuTimer_Start(&Scu_Timer);

    while (1) {}

    cleanup_platform();
    return 0;
}

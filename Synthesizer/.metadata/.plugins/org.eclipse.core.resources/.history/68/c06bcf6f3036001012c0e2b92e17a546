#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "xgpio.h"
#include <math.h>
#include "xparameters.h"
#include "xil_printf.h"
#include "peripheral.h" // <-- Jouw eigen rotary/button classes

#define TIMER_DEVICE_ID      XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID       XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR      XPAR_SCUTIMER_INTR
#define SAMPLE_RATE          48000
#define PI                   3.14159265358979323846
#define MAX_DELAY            4800  // 0.1s delay at 48kHz

XGpio GpioButtons;
XGpio GpioSwitches;
XGpio GpioLed;

volatile int32_t inputL, inputR, outputL, outputR;
int32_t echoBufferL[MAX_DELAY] = {0};
int32_t echoBufferR[MAX_DELAY] = {0};
int32_t reverbBufferL[MAX_DELAY] = {0};
int32_t reverbBufferR[MAX_DELAY] = {0};
int delayIndex = 0;

static float phase1 = 0.0f, phase2 = 0.0f, phase3 = 0.0f, phase4 = 0.0f;

u32 prevButtonStatus = 0xFFFFFFFF;
u32 prevSwitchStatus = 0xFFFFFFFF;

volatile float volume = 1.0f; // volume van 0.0 tot 1.0
Rotary_enc volumeEncoder;     // rotary encoder instantie

void DisplayStatusOnLED(u32 buttonStatus, u32 switchStatus) {
    uint8_t ledValue = 0x00;

    if ((switchStatus & 0x3) == 0) {
        switch (buttonStatus) {
            case 1: ledValue |= 0x01; break;
            case 2: ledValue |= 0x02; break;
            case 4: ledValue |= 0x04; break;
            case 8: ledValue |= 0x08; break;
            default: break;
        }
    }

    if (switchStatus & 0x1) {
        ledValue |= 0x03;
    }
    if (switchStatus & 0x2) {
        ledValue |= 0x0C;
    }

    XGpio_DiscreteWrite(&GpioLed, 1, ledValue);
}

void PrintStatusIfChanged(u32 buttonStatus, u32 switchStatus) {
    if (buttonStatus != prevButtonStatus || switchStatus != prevSwitchStatus) {
        xil_printf("Status: ");

        switch (buttonStatus) {
            case 1: xil_printf("A4 "); break;
            case 2: xil_printf("C5 "); break;
            case 4: xil_printf("E5 "); break;
            case 8: xil_printf("G5 "); break;
            default: xil_printf("No tone "); break;
        }

        xil_printf("| Echo %s | Reverb %s\r\n",
                   (switchStatus & 0x1) ? "ON" : "OFF",
                   (switchStatus & 0x2) ? "ON" : "OFF");

        prevButtonStatus = buttonStatus;
        prevSwitchStatus = switchStatus;
    }
}

void GenerateTone(int32_t* outputBufferL, int32_t* outputBufferR, int bufferSize, float frequency, float* phase) {
    const float amplitude = 1000000.0f;
    const float increment = 2.0f * PI * frequency / SAMPLE_RATE;

    for (int i = 0; i < bufferSize; i++) {
        float sample = sinf(*phase);
        int32_t value = (int32_t)(sample * amplitude);
        outputBufferL[i] = outputBufferR[i] = value;

        *phase += increment;
        if (*phase >= 2.0f * PI) *phase -= 2.0f * PI;
    }
}

void EchoEffect(int32_t* inputL, int32_t* inputR, int32_t* outputL, int32_t* outputR) {
    *outputL = (*inputL + echoBufferL[delayIndex]) / 2;
    *outputR = (*inputR + echoBufferR[delayIndex]) / 2;
    echoBufferL[delayIndex] = *outputL;
    echoBufferR[delayIndex] = *outputR;
}

void ReverbEffect(int32_t* inputL, int32_t* inputR, int32_t* outputL, int32_t* outputR) {
    *outputL = (*inputL * 3 + reverbBufferL[delayIndex]) / 4;
    *outputR = (*inputR * 3 + reverbBufferR[delayIndex]) / 4;
    reverbBufferL[delayIndex] = *outputL;
    reverbBufferR[delayIndex] = *outputR;
}

static void Timer_ISR(void *CallBackRef) {
    XScuTimer *TimerInstancePtr = (XScuTimer *)CallBackRef;
    XScuTimer_ClearInterruptStatus(TimerInstancePtr);

    u32 buttonStatus = XGpio_DiscreteRead(&GpioButtons, 1);
    u32 switchStatus = XGpio_DiscreteRead(&GpioSwitches, 2);

    DisplayStatusOnLED(buttonStatus, switchStatus);
    PrintStatusIfChanged(buttonStatus, switchStatus);

    inputL = (int32_t)Xil_In32(I2S_DATA_RX_L_REG);
    inputR = (int32_t)Xil_In32(I2S_DATA_RX_R_REG);
    outputL = inputL;
    outputR = inputR;

    switch (buttonStatus) {
        case 1: GenerateTone(&outputL, &outputR, 1, 440.0f, &phase1); break;
        case 2: GenerateTone(&outputL, &outputR, 1, 523.25f, &phase2); break;
        case 4: GenerateTone(&outputL, &outputR, 1, 659.25f, &phase3); break;
        case 8: GenerateTone(&outputL, &outputR, 1, 783.99f, &phase4); break;
        default: break;
    }

    if (switchStatus & 0x1) {
        EchoEffect(&outputL, &outputR, &outputL, &outputR);
    }
    if (switchStatus & 0x2) {
        ReverbEffect(&outputL, &outputR, &outputL, &outputR);
    }

    delayIndex = (delayIndex + 1) % MAX_DELAY;

    // Toepassen van volume
    int32_t scaledL = (int32_t)((float)outputL * volume);
    int32_t scaledR = (int32_t)((float)outputR * volume);

    Xil_Out32(I2S_DATA_TX_L_REG, (u32)scaledL);
    Xil_Out32(I2S_DATA_TX_R_REG, (u32)scaledR);
}

static int Timer_Intr_Setup(XScuGic *IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId) {
    XScuGic_Config *IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
    XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, IntcInstancePtr);
    XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
    XScuGic_Enable(IntcInstancePtr, TimerIntrId);
    XScuTimer_EnableInterrupt(TimerInstancePtr);
    Xil_ExceptionEnable();
    return XST_SUCCESS;
}

int main() {
    init_platform();

    IicConfig(XPAR_XIICPS_0_DEVICE_ID);
    AudioPllConfig();
    AudioConfigureJacks();
    LineinLineoutConfig();

    xil_printf("Audio Synthesizer DEMO\r\n");

    XGpio_Initialize(&GpioButtons, XPAR_AXI_GPIO_1_DEVICE_ID);
    XGpio_Initialize(&GpioSwitches, XPAR_AXI_GPIO_1_DEVICE_ID);
    XGpio_SetDataDirection(&GpioButtons, 1, 0xF);
    XGpio_SetDataDirection(&GpioSwitches, 2, 0x3);

    XGpio_Initialize(&GpioLed, XPAR_AXI_GPIO_2_DEVICE_ID);
    XGpio_SetDataDirection(&GpioLed, 1, 0x0);

    volumeEncoder = Rotary_enc(); // rotary encoder init

    XScuTimer Scu_Timer;
    XScuTimer_Config *Scu_ConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);
    XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
    Timer_Intr_Setup(&(XScuGic){0}, &Scu_Timer, TIMER_IRPT_INTR);
    XScuTimer_LoadTimer(&Scu_Timer, (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2) / SAMPLE_RATE);
    XScuTimer_EnableAutoReload(&Scu_Timer);
    XScuTimer_Start(&Scu_Timer);

    while (1) {
        switch (volumeEncoder.GetSate()) {
            case Rotary_enc::LEFT:
                if (volume > 0.05f) volume -= 0.05f;
                xil_printf("Volume: %.2f\r\n", volume);
                break;
            case Rotary_enc::RIGHT:
                if (volume < 1.0f) volume += 0.05f;
                xil_printf("Volume: %.2f\r\n", volume);
                break;
            default:
                break;
        }
    }

    cleanup_platform();
    return 0;
}

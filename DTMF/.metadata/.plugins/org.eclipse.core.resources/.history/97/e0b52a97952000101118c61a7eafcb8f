#include <stdio.h>
#include <stdbool.h>
#include "platform.h"
#include "xil_printf.h"
#include "arm_math.h"
#include "arm_const_structs.h"
#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "math.h"
#include "xuartps.h"
#include "xgpio.h"

XGpio GpioLed;
XGpio GpioSwitches;

int switchValue;
bool isReceiveMode;

#define UINT32_MAX_AS_FLOAT 4294967295.0f
#define UINT_SCALED_MAX_VALUE 0xFFFFF

#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR		XPAR_SCUTIMER_INTR


#define LED_CHANNEL 1
#define LED_DELAY   1000000

#define FFT_SIZE 1024
#define SAMPLE_BLOCK_SIZE (FFT_SIZE * 2)
#define SAMPLE_RATE 48000

float32_t sampleBuffer[SAMPLE_BLOCK_SIZE];

volatile unsigned long u32DataL, u32DataR;

volatile float32_t tone_freq1 = 0.0f, tone_freq2 = 0.0f;
volatile float32_t theta1 = 0.0f, theta2 = 0.0f;
volatile int tone_active = 0;

XUartPs Uart_Ps;


/**
 * @brief Timer interrupt service routine for tone generation.
 *
 * Generates audio samples based on active DTMF frequencies and writes to I2S TX.
 *
 * @param CallBackRef Pointer to the timer instance (unused).
 */
static void Timer_ISR(void * CallBackRef)
{
	if (!tone_active) return;

	float32_t inc1 = 2 * PI * tone_freq1 / SAMPLE_RATE;
	float32_t inc2 = 2 * PI * tone_freq2 / SAMPLE_RATE;
	theta1 += inc1; if (theta1 > 2*PI) theta1 -= 2*PI;
	theta2 += inc2; if (theta2 > 2*PI) theta2 -= 2*PI;

	float32_t val = (arm_sin_f32(theta1) + arm_sin_f32(theta2));
	val = fmaxf(fminf(val, 1.0f), -1.0f);
	uint32_t scaled = (uint32_t)(((val + 1.0f) * 0.5f) * UINT_SCALED_MAX_VALUE);
	Xil_Out32(I2S_DATA_TX_L_REG, scaled);
}

/**
 * @brief Sets up the timer and GIC interrupt for periodic audio sample generation.
 *
 * @param IntcInstancePtr Pointer to the interrupt controller instance.
 * @param TimerInstancePtr Pointer to the timer instance.
 * @param TimerIntrId Timer interrupt ID.
 * @return int Status (XST_SUCCESS on success).
 */
static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId)
{
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler,IntcInstancePtr);
	XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);
	XScuTimer_EnableInterrupt(TimerInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}

/**
 * @brief Displays the DTMF key on GPIO LEDs as a binary value.
 *
 * @param key The DTMF key to display.
 */
void DisplayDTMFOnLED(char key)
{
    uint8_t value = 0xF;
    switch (key) {
        case '1': value = 0x1; break;
        case '2': value = 0x2; break;
        case '3': value = 0x3; break;
        case 'A': value = 0x0; break;
        case '4': value = 0x4; break;
        case '5': value = 0x5; break;
        case '6': value = 0x6; break;
        case 'B': value = 0x7; break;
        case '7': value = 0x8; break;
        case '8': value = 0x9; break;
        case '9': value = 0xA; break;
        case 'C': value = 0xB; break;
        case '*': value = 0xC; break;
        case '0': value = 0xD; break;
        case '#': value = 0xE; break;
        case 'D': value = 0xF; break;
    }

    XGpio_DiscreteWrite(&GpioLed, 1, value);
}


typedef struct {
    float32_t freq1;
    float32_t freq2;
} DTMFPair;

DTMFPair GetDTMFFrequencies(char key) {
    switch (key) {
        case '1': return (DTMFPair){697, 1209};
        case '2': return (DTMFPair){697, 1336};
        case '3': return (DTMFPair){697, 1477};
        case 'A': return (DTMFPair){697, 1633};
        case '4': return (DTMFPair){770, 1209};
        case '5': return (DTMFPair){770, 1336};
        case '6': return (DTMFPair){770, 1477};
        case 'B': return (DTMFPair){770, 1633};
        case '7': return (DTMFPair){852, 1209};
        case '8': return (DTMFPair){852, 1336};
        case '9': return (DTMFPair){852, 1477};
        case 'C': return (DTMFPair){852, 1633};
        case '*': return (DTMFPair){941, 1209};
        case '0': return (DTMFPair){941, 1336};
        case '#': return (DTMFPair){941, 1477};
        case 'D': return (DTMFPair){941, 1633};
        default:  return (DTMFPair){0, 0};
    }
}

typedef struct {
    char key;
    float low;
    float high;
} DTMFEntry;

DTMFEntry dtmfTable[] = {
    {'1', 697, 1209}, {'2', 697, 1336}, {'3', 697, 1477}, {'A', 697, 1633},
    {'4', 770, 1209}, {'5', 770, 1336}, {'6', 770, 1477}, {'B', 770, 1633},
    {'7', 852, 1209}, {'8', 852, 1336}, {'9', 852, 1477}, {'C', 852, 1633},
    {'*', 941, 1209}, {'0', 941, 1336}, {'#', 941, 1477}, {'D', 941, 1633}
};

char matchDTMF(float f1, float f2, float *errorOut)
{
    char bestKey = '?';
    float minError = 1e6;

    for (int i = 0; i < sizeof(dtmfTable)/sizeof(DTMFEntry); i++) {
        float df1 = fabsf(f1 - dtmfTable[i].low) + fabsf(f2 - dtmfTable[i].high);
        float df2 = fabsf(f2 - dtmfTable[i].low) + fabsf(f1 - dtmfTable[i].high);
        float err = (df1 < df2) ? df1 : df2;

        if (err < minError) {
            minError = err;
            bestKey = dtmfTable[i].key;
        }
    }

    if (errorOut) *errorOut = minError;
    return bestKey;
}

void DetectDTMFFrequency()
{
	arm_status status;
	float32_t fftOutput[SAMPLE_BLOCK_SIZE];
	float32_t scratchBuffer[SAMPLE_BLOCK_SIZE];

	for (int i = 0; i < FFT_SIZE; i++) {
		int32_t raw = (int32_t)(Xil_In32(I2S_DATA_RX_L_REG) << 8) >> 8;
		float32_t sample = (float32_t)raw / 8388608.0f;
		sampleBuffer[2*i] = sample;
		sampleBuffer[2*i+1] = 0.0f;
		usleep(20);
	}

	arm_cfft_instance_f32 fft_inst;
	status = arm_cfft_init_f32(&fft_inst, FFT_SIZE);
	arm_cfft_f32(&fft_inst, sampleBuffer, fftOutput, scratchBuffer, 0);

	float32_t mag[FFT_SIZE];
	arm_cmplx_mag_f32(fftOutput, mag, FFT_SIZE);

	float maxLow = 0, maxHigh = 0;
	int lowIdx = -1, highIdx = -1;

	for (int i = 1; i < FFT_SIZE / 2; i++) {
		float freq = (float)i * SAMPLE_RATE / FFT_SIZE;
		if (freq >= 650 && freq <= 1050) {
			if (mag[i] > maxLow) {
				maxLow = mag[i];
				lowIdx = i;
			}
		} else if (freq >= 1100 && freq <= 1700) {
			if (mag[i] > maxHigh) {
				maxHigh = mag[i];
				highIdx = i;
			}
		}
	}

	if (lowIdx < 0 || highIdx < 0 || maxLow < 0.02f || maxHigh < 0.02f || (maxHigh / maxLow) < 0.3f) {
		xil_printf("SSHHHHH\r\n");
		return;
	}

	float freq1 = lowIdx * SAMPLE_RATE / FFT_SIZE;
	float freq2 = highIdx * SAMPLE_RATE / FFT_SIZE;

	xil_printf("Detected Frequencies: %d Hz and %d Hz\r\n", (int)freq1, (int)freq2);

	float error;
	char key = matchDTMF(freq1, freq2, &error);
	if (error < 45) {
		xil_printf("Detected Key: %c (error: %d Hz)\r\n", key, (int)error);
	}

	usleep(200000);
	return;;
}

void PlayDTMF(float32_t f1, float32_t f2, float duration_sec)
{
    tone_freq1 = f1;
    tone_freq2 = f2;
    theta1 = theta2 = 0.0f;
    tone_active = 1;
    usleep((int)(duration_sec * 1000000));
    tone_active = 0;
}

void receivingLoop()
{
	DetectDTMFFrequency();
}

void sendingLoop()
{
	char c;
    if (XUartPs_Recv(&Uart_Ps, &c, 1) == 1) {
		  xil_printf("Received: %c\r\n", c);
        DTMFPair tones = GetDTMFFrequencies((char)c);
        if (tones.freq1 > 0 && tones.freq2 > 0) {
            PlayDTMF(tones.freq1, tones.freq2, 1.0f);
        }
    }
}

int main()
{
	  int Status;
	  init_platform();

	  XUartPs_Config *Config = XUartPs_LookupConfig(XPAR_XUARTPS_0_DEVICE_ID);
	  XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
	  XUartPs_SetBaudRate(&Uart_Ps, 115200);
	  xil_printf("Ready for input\r\n");

	  XGpio_Initialize(&GpioSwitches, XPAR_AXI_GPIO_1_DEVICE_ID);
	  XGpio_SetDataDirection(&GpioSwitches, 2, 0xF);
	  switchValue = XGpio_DiscreteRead(&GpioSwitches, 2);
	  isReceiveMode = (switchValue & 0x1) != 0;
	  xil_printf("Mode: %s\r\n", isReceiveMode ? "Receive" : "Send");

	  IicConfig(XPAR_XIICPS_0_DEVICE_ID);
	  AudioPllConfig();
	  AudioConfigureJacks();
	  LineinLineoutConfig();

	  XScuTimer Scu_Timer;
	  XScuTimer_Config *Scu_ConfigPtr;
	  XScuGic IntcInstance;

	  Scu_ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	  Status = XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
	  Status = Timer_Intr_Setup(&IntcInstance, &Scu_Timer, XPS_SCU_TMR_INT_ID);
	  XScuTimer_LoadTimer(&Scu_Timer,(XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2)/(SAMPLE_RATE));
	  XScuTimer_EnableAutoReload(&Scu_Timer);
	  XScuTimer_Start(&Scu_Timer);

	  for(;;)
	  {
		  static int prevSwitchValue = -1;

		  switchValue = XGpio_DiscreteRead(&GpioSwitches, 2);
		  if (switchValue != prevSwitchValue)
		  {
		  	isReceiveMode = (switchValue & 0x1) != 0;
		  	xil_printf("Mode: %s\r\n", isReceiveMode ? "Receiving" : "Sending");
		  	prevSwitchValue = switchValue;
		  }

		  if(isReceiveMode)
		  {
			  receivingLoop();
		  }
		  else
		  {
			  sendingLoop();
		  }
	  }

	  cleanup_platform();
	  return 0;
}

#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "math.h"
#include "arm_math.h"

#define TIMER_DEVICE_ID     XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR     XPAR_SCUTIMER_INTR
#define SAMPLE_RATE         48000
#define PI                  3.14159265358979f
#define MAX_AMPLITUDE       0x7FFFFF  // 24-bit audio

volatile int Timer_Intr_rcvd;

// Frequencies for DTMF tones
float dtmf_low_freqs[] = {697.0f, 770.0f, 852.0f, 941.0f};
float dtmf_high_freqs[] = {1209.0f, 1336.0f, 1477.0f, 1633.0f};

// Example: Tone for digit '5' (770Hz + 1336Hz)
const float freq1 = 770.0f;
const float freq2 = 1336.0f;

// Internal phase states
static float theta1 = 0.0f;
static float theta2 = 0.0f;

// Timer ISR for DTMF generation
static void Timer_ISR(void *CallBackRef) {
    XScuTimer *timerInstancePtr = (XScuTimer *)CallBackRef;
    XScuTimer_ClearInterruptStatus(timerInstancePtr);

    float step1 = 2 * PI * freq1 / SAMPLE_RATE;
    float step2 = 2 * PI * freq2 / SAMPLE_RATE;

    theta1 += step1;
    theta2 += step2;
    if (theta1 > 2 * PI) theta1 -= 2 * PI;
    if (theta2 > 2 * PI) theta2 -= 2 * PI;

    float sample = 0.5f * (arm_sin_f32(theta1) + arm_sin_f32(theta2));
    uint32_t scaled_sample = (uint32_t)(((sample + 1.0f) * 0.5f) * MAX_AMPLITUDE);

    Xil_Out32(I2S_DATA_TX_L_REG, scaled_sample);
    Xil_Out32(I2S_DATA_TX_R_REG, scaled_sample);
}

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId) {
    int Status;
    XScuGic_Config *IntcConfig;
    IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
    Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);

    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, IntcInstancePtr);
    Status = XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
    XScuGic_Enable(IntcInstancePtr, TimerIntrId);

    XScuTimer_EnableInterrupt(TimerInstancePtr);
    Xil_ExceptionEnable();
    return XST_SUCCESS;
}

int main() {
    int Status;
    init_platform();
    IicConfig(XPAR_XIICPS_0_DEVICE_ID);
    AudioPllConfig();
    AudioConfigureJacks();
    LineinLineoutConfig();

    print("DTMF Generator Demo\n\r");

    XScuTimer Scu_Timer;
    XScuTimer_Config *Scu_ConfigPtr;
    XScuGic IntcInstance;

    Scu_ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
    Status = XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
    Status = Timer_Intr_Setup(&IntcInstance, &Scu_Timer, XPS_SCU_TMR_INT_ID);

    XScuTimer_LoadTimer(&Scu_Timer, (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2) / SAMPLE_RATE);
    XScuTimer_EnableAutoReload(&Scu_Timer);
    XScuTimer_Start(&Scu_Timer);

    while (1) {
        // Hier kan je later seriële communicatie of toetsenbord toevoegen
    }

    cleanup_platform();
    return 0;
}
